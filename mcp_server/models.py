# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:17:05+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class ApplicationDescription(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class ApplicationMaintenanceWindowEndTime(
    RootModel[
        constr(pattern=r'([01][0-9]|2[0-3]):[0-5][0-9]', min_length=5, max_length=5)
    ]
):
    root: constr(pattern=r'([01][0-9]|2[0-3]):[0-5][0-9]', min_length=5, max_length=5)


class ApplicationMaintenanceWindowStartTime(
    RootModel[
        constr(pattern=r'([01][0-9]|2[0-3]):[0-5][0-9]', min_length=5, max_length=5)
    ]
):
    root: constr(pattern=r'([01][0-9]|2[0-3]):[0-5][0-9]', min_length=5, max_length=5)


class ApplicationMode(Enum):
    STREAMING = 'STREAMING'
    INTERACTIVE = 'INTERACTIVE'


class ApplicationName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=128)


class ApplicationRestoreType(Enum):
    SKIP_RESTORE_FROM_SNAPSHOT = 'SKIP_RESTORE_FROM_SNAPSHOT'
    RESTORE_FROM_LATEST_SNAPSHOT = 'RESTORE_FROM_LATEST_SNAPSHOT'
    RESTORE_FROM_CUSTOM_SNAPSHOT = 'RESTORE_FROM_CUSTOM_SNAPSHOT'


class ApplicationStatus(Enum):
    DELETING = 'DELETING'
    STARTING = 'STARTING'
    STOPPING = 'STOPPING'
    READY = 'READY'
    RUNNING = 'RUNNING'
    UPDATING = 'UPDATING'
    AUTOSCALING = 'AUTOSCALING'
    FORCE_STOPPING = 'FORCE_STOPPING'
    ROLLING_BACK = 'ROLLING_BACK'
    MAINTENANCE = 'MAINTENANCE'
    ROLLED_BACK = 'ROLLED_BACK'


class ApplicationVersionId(RootModel[conint(ge=1, le=999999999)]):
    root: conint(ge=1, le=999999999)


class ApplicationVersionSummary(BaseModel):
    ApplicationStatus_1: ApplicationStatus = Field(..., alias='ApplicationStatus')
    ApplicationVersionId_1: ApplicationVersionId = Field(
        ..., alias='ApplicationVersionId'
    )


class ArtifactType(Enum):
    UDF = 'UDF'
    DEPENDENCY_JAR = 'DEPENDENCY_JAR'


class AuthorizedUrl(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class BasePath(
    RootModel[constr(pattern=r'[a-zA-Z0-9/!-_.*\'()]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[a-zA-Z0-9/!-_.*\'()]+', min_length=1, max_length=1024)


class BooleanObject(RootModel[bool]):
    root: bool


class BucketARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=2048)


class CheckpointInterval(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CodeContentType(Enum):
    PLAINTEXT = 'PLAINTEXT'
    ZIPFILE = 'ZIPFILE'


class CodeMD5(RootModel[constr(min_length=128, max_length=128)]):
    root: constr(min_length=128, max_length=128)


class CodeSize(RootModel[conint(ge=0, le=52428800)]):
    root: conint(ge=0, le=52428800)


class CodeValidationException(RootModel[Any]):
    root: Any


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConditionalToken(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_+/=]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_+/=]+', min_length=1, max_length=512)


class ConfigurationType(Enum):
    DEFAULT = 'DEFAULT'
    CUSTOM = 'CUSTOM'


class CreateApplicationPresignedUrlResponse(BaseModel):
    AuthorizedUrl_1: Optional[AuthorizedUrl] = Field(None, alias='AuthorizedUrl')


class CreateApplicationSnapshotResponse(BaseModel):
    pass


class DatabaseARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=2048)


class DeleteApplicationResponse(BaseModel):
    pass


class DeleteApplicationSnapshotResponse(BaseModel):
    pass


class DescribeApplicationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    IncludeAdditionalDetails: Optional[BooleanObject] = None


class DescribeApplicationVersionRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    ApplicationVersionId_1: ApplicationVersionId = Field(
        ..., alias='ApplicationVersionId'
    )


class FileKey(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class FlinkRunConfiguration(BaseModel):
    AllowNonRestoredState: Optional[BooleanObject] = None


class GlueDataCatalogConfiguration(BaseModel):
    DatabaseARN_1: DatabaseARN = Field(..., alias='DatabaseARN')


class GlueDataCatalogConfigurationDescription(BaseModel):
    DatabaseARN_1: DatabaseARN = Field(..., alias='DatabaseARN')


class GlueDataCatalogConfigurationUpdate(BaseModel):
    DatabaseARNUpdate: DatabaseARN


class Id(RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=50)]):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=50)


class InAppStreamName(
    RootModel[constr(pattern=r'[^-\s<>&]*', min_length=1, max_length=32)]
):
    root: constr(pattern=r'[^-\s<>&]*', min_length=1, max_length=32)


class InAppStreamNames(RootModel[List[InAppStreamName]]):
    root: List[InAppStreamName]


class InAppTableName(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class InputParallelismCount(RootModel[conint(ge=1, le=64)]):
    root: conint(ge=1, le=64)


class InputParallelismUpdate(BaseModel):
    CountUpdate: InputParallelismCount


class InputStartingPosition(Enum):
    NOW = 'NOW'
    TRIM_HORIZON = 'TRIM_HORIZON'
    LAST_STOPPED_POINT = 'LAST_STOPPED_POINT'


class InputStartingPositionConfiguration(BaseModel):
    InputStartingPosition_1: Optional[InputStartingPosition] = Field(
        None, alias='InputStartingPosition'
    )


class InvalidApplicationConfigurationException(RootModel[Any]):
    root: Any


class InvalidArgumentException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class JobPlanDescription(RootModel[str]):
    root: str


class KinesisAnalyticsARN(
    RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=2048)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListApplicationVersionsInputLimit(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ListApplicationsInputLimit(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ListApplicationsRequest(BaseModel):
    Limit: Optional[ListApplicationsInputLimit] = None
    NextToken: Optional[ApplicationName] = None


class ListSnapshotsInputLimit(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: KinesisAnalyticsARN


class LogLevel(Enum):
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'
    DEBUG = 'DEBUG'


class LogStreamARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=2048)


class MavenArtifactId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class MavenGroupId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class MavenVersion(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class MetricsLevel(Enum):
    APPLICATION = 'APPLICATION'
    TASK = 'TASK'
    OPERATOR = 'OPERATOR'
    PARALLELISM = 'PARALLELISM'


class MinPauseBetweenCheckpoints(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MonitoringConfiguration(BaseModel):
    ConfigurationType_1: ConfigurationType = Field(..., alias='ConfigurationType')
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    MetricsLevel_1: Optional[MetricsLevel] = Field(None, alias='MetricsLevel')


class MonitoringConfigurationDescription(BaseModel):
    ConfigurationType_1: Optional[ConfigurationType] = Field(
        None, alias='ConfigurationType'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    MetricsLevel_1: Optional[MetricsLevel] = Field(None, alias='MetricsLevel')


class MonitoringConfigurationUpdate(BaseModel):
    ConfigurationTypeUpdate: Optional[ConfigurationType] = None
    LogLevelUpdate: Optional[LogLevel] = None
    MetricsLevelUpdate: Optional[MetricsLevel] = None


class NextToken(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ObjectVersion(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class Parallelism(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ParallelismPerKPU(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ParsedInputRecordField(RootModel[str]):
    root: str


class ProcessedInputRecord(RootModel[str]):
    root: str


class ProcessedInputRecords(RootModel[List[ProcessedInputRecord]]):
    root: List[ProcessedInputRecord]


class PropertyKey(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class PropertyValue(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class RawInputRecord(RootModel[str]):
    root: str


class RawInputRecords(RootModel[List[RawInputRecord]]):
    root: List[RawInputRecord]


class RecordColumnDelimiter(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class RecordColumnMapping(RootModel[constr(min_length=0, max_length=65535)]):
    root: constr(min_length=0, max_length=65535)


class RecordColumnName(
    RootModel[constr(pattern=r'[^-\s<>&]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[^-\s<>&]*', min_length=1, max_length=256)


class RecordColumnSqlType(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class RecordEncoding(RootModel[constr(pattern=r'UTF-8', min_length=5, max_length=5)]):
    root: constr(pattern=r'UTF-8', min_length=5, max_length=5)


class RecordFormatType(Enum):
    JSON = 'JSON'
    CSV = 'CSV'


class RecordRowDelimiter(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class RecordRowPath(
    RootModel[constr(pattern=r'^(?=^\$)(?=^\S+$).*$', min_length=1, max_length=65535)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?=^\$)(?=^\S+$).*$', min_length=1, max_length=65535)


class ResourceARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=2048)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceProvisionedThroughputExceededException(RootModel[Any]):
    root: Any


class RoleARN(RootModel[constr(pattern=r'arn:.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'arn:.*', min_length=1, max_length=2048)


class RollbackApplicationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId


class RuntimeEnvironment(Enum):
    SQL_1_0 = 'SQL-1_0'
    FLINK_1_6 = 'FLINK-1_6'
    FLINK_1_8 = 'FLINK-1_8'
    ZEPPELIN_FLINK_1_0 = 'ZEPPELIN-FLINK-1_0'
    FLINK_1_11 = 'FLINK-1_11'
    FLINK_1_13 = 'FLINK-1_13'
    ZEPPELIN_FLINK_2_0 = 'ZEPPELIN-FLINK-2_0'
    FLINK_1_15 = 'FLINK-1_15'


class S3ApplicationCodeLocationDescription(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    FileKey_1: FileKey = Field(..., alias='FileKey')
    ObjectVersion_1: Optional[ObjectVersion] = Field(None, alias='ObjectVersion')


class S3Configuration(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    FileKey_1: FileKey = Field(..., alias='FileKey')


class S3ContentBaseLocation(BaseModel):
    BasePath_1: Optional[BasePath] = Field(None, alias='BasePath')
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')


class S3ContentBaseLocationDescription(BaseModel):
    BasePath_1: Optional[BasePath] = Field(None, alias='BasePath')
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')


class S3ContentBaseLocationUpdate(BaseModel):
    BasePathUpdate: Optional[BasePath] = None
    BucketARNUpdate: Optional[BucketARN] = None


class S3ContentLocation(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    FileKey_1: FileKey = Field(..., alias='FileKey')
    ObjectVersion_1: Optional[ObjectVersion] = Field(None, alias='ObjectVersion')


class S3ContentLocationUpdate(BaseModel):
    BucketARNUpdate: Optional[BucketARN] = None
    FileKeyUpdate: Optional[FileKey] = None
    ObjectVersionUpdate: Optional[ObjectVersion] = None


class S3ReferenceDataSource(BaseModel):
    BucketARN_1: Optional[BucketARN] = Field(None, alias='BucketARN')
    FileKey_1: Optional[FileKey] = Field(None, alias='FileKey')


class S3ReferenceDataSourceDescription(BaseModel):
    BucketARN_1: BucketARN = Field(..., alias='BucketARN')
    FileKey_1: FileKey = Field(..., alias='FileKey')
    ReferenceRoleARN: Optional[RoleARN] = None


class S3ReferenceDataSourceUpdate(BaseModel):
    BucketARNUpdate: Optional[BucketARN] = None
    FileKeyUpdate: Optional[FileKey] = None


class SecurityGroupId(RootModel[str]):
    root: str


class SecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=5, min_length=1)


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SessionExpirationDurationInSeconds(RootModel[conint(ge=1800, le=43200)]):
    root: conint(ge=1800, le=43200)


class SnapshotName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class SnapshotStatus(Enum):
    CREATING = 'CREATING'
    READY = 'READY'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class SqlRunConfiguration(BaseModel):
    InputId: Id
    InputStartingPositionConfiguration_1: InputStartingPositionConfiguration = Field(
        ..., alias='InputStartingPositionConfiguration'
    )


class SqlRunConfigurations(RootModel[List[SqlRunConfiguration]]):
    root: List[SqlRunConfiguration]


class StartApplicationResponse(BaseModel):
    pass


class StopApplicationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Force: Optional[BooleanObject] = None


class StopApplicationResponse(BaseModel):
    pass


class SubnetId(RootModel[str]):
    root: str


class SubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=16, min_length=1)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TextContent(RootModel[constr(min_length=0, max_length=102400)]):
    root: constr(min_length=0, max_length=102400)


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyTagsException(RootModel[Any]):
    root: Any


class UnableToDetectSchemaException(RootModel[Any]):
    root: Any


class UnsupportedOperationException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceARN: KinesisAnalyticsARN
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class UntagResourceResponse(BaseModel):
    pass


class UrlType(Enum):
    FLINK_DASHBOARD_URL = 'FLINK_DASHBOARD_URL'
    ZEPPELIN_UI_URL = 'ZEPPELIN_UI_URL'


class VpcConfiguration(BaseModel):
    SecurityGroupIds_1: SecurityGroupIds = Field(..., alias='SecurityGroupIds')
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')


class VpcConfigurationUpdate(BaseModel):
    SecurityGroupIdUpdates: Optional[SecurityGroupIds] = None
    SubnetIdUpdates: Optional[SubnetIds] = None
    VpcConfigurationId: Id


class VpcConfigurationUpdates(RootModel[List[VpcConfigurationUpdate]]):
    root: List[VpcConfigurationUpdate]


class VpcConfigurations(RootModel[List[VpcConfiguration]]):
    root: List[VpcConfiguration]


class VpcId(RootModel[str]):
    root: str


class ZeppelinMonitoringConfiguration(BaseModel):
    LogLevel_1: LogLevel = Field(..., alias='LogLevel')


class ZeppelinMonitoringConfigurationDescription(BaseModel):
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')


class ZeppelinMonitoringConfigurationUpdate(BaseModel):
    LogLevelUpdate: LogLevel


class ZipFileContent(RootModel[constr(min_length=0, max_length=52428800)]):
    root: constr(min_length=0, max_length=52428800)


class XAmzTarget(Enum):
    KinesisAnalytics_20180523_AddApplicationCloudWatchLoggingOption = (
        'KinesisAnalytics_20180523.AddApplicationCloudWatchLoggingOption'
    )


class XAmzTarget1(Enum):
    KinesisAnalytics_20180523_AddApplicationInput = (
        'KinesisAnalytics_20180523.AddApplicationInput'
    )


class XAmzTarget2(Enum):
    KinesisAnalytics_20180523_AddApplicationInputProcessingConfiguration = (
        'KinesisAnalytics_20180523.AddApplicationInputProcessingConfiguration'
    )


class XAmzTarget3(Enum):
    KinesisAnalytics_20180523_AddApplicationOutput = (
        'KinesisAnalytics_20180523.AddApplicationOutput'
    )


class XAmzTarget4(Enum):
    KinesisAnalytics_20180523_AddApplicationReferenceDataSource = (
        'KinesisAnalytics_20180523.AddApplicationReferenceDataSource'
    )


class XAmzTarget5(Enum):
    KinesisAnalytics_20180523_AddApplicationVpcConfiguration = (
        'KinesisAnalytics_20180523.AddApplicationVpcConfiguration'
    )


class XAmzTarget6(Enum):
    KinesisAnalytics_20180523_CreateApplication = (
        'KinesisAnalytics_20180523.CreateApplication'
    )


class XAmzTarget7(Enum):
    KinesisAnalytics_20180523_CreateApplicationPresignedUrl = (
        'KinesisAnalytics_20180523.CreateApplicationPresignedUrl'
    )


class XAmzTarget8(Enum):
    KinesisAnalytics_20180523_CreateApplicationSnapshot = (
        'KinesisAnalytics_20180523.CreateApplicationSnapshot'
    )


class XAmzTarget9(Enum):
    KinesisAnalytics_20180523_DeleteApplication = (
        'KinesisAnalytics_20180523.DeleteApplication'
    )


class XAmzTarget10(Enum):
    KinesisAnalytics_20180523_DeleteApplicationCloudWatchLoggingOption = (
        'KinesisAnalytics_20180523.DeleteApplicationCloudWatchLoggingOption'
    )


class XAmzTarget11(Enum):
    KinesisAnalytics_20180523_DeleteApplicationInputProcessingConfiguration = (
        'KinesisAnalytics_20180523.DeleteApplicationInputProcessingConfiguration'
    )


class XAmzTarget12(Enum):
    KinesisAnalytics_20180523_DeleteApplicationOutput = (
        'KinesisAnalytics_20180523.DeleteApplicationOutput'
    )


class XAmzTarget13(Enum):
    KinesisAnalytics_20180523_DeleteApplicationReferenceDataSource = (
        'KinesisAnalytics_20180523.DeleteApplicationReferenceDataSource'
    )


class XAmzTarget14(Enum):
    KinesisAnalytics_20180523_DeleteApplicationSnapshot = (
        'KinesisAnalytics_20180523.DeleteApplicationSnapshot'
    )


class XAmzTarget15(Enum):
    KinesisAnalytics_20180523_DeleteApplicationVpcConfiguration = (
        'KinesisAnalytics_20180523.DeleteApplicationVpcConfiguration'
    )


class XAmzTarget16(Enum):
    KinesisAnalytics_20180523_DescribeApplication = (
        'KinesisAnalytics_20180523.DescribeApplication'
    )


class XAmzTarget17(Enum):
    KinesisAnalytics_20180523_DescribeApplicationSnapshot = (
        'KinesisAnalytics_20180523.DescribeApplicationSnapshot'
    )


class XAmzTarget18(Enum):
    KinesisAnalytics_20180523_DescribeApplicationVersion = (
        'KinesisAnalytics_20180523.DescribeApplicationVersion'
    )


class XAmzTarget19(Enum):
    KinesisAnalytics_20180523_DiscoverInputSchema = (
        'KinesisAnalytics_20180523.DiscoverInputSchema'
    )


class XAmzTarget20(Enum):
    KinesisAnalytics_20180523_ListApplicationSnapshots = (
        'KinesisAnalytics_20180523.ListApplicationSnapshots'
    )


class XAmzTarget21(Enum):
    KinesisAnalytics_20180523_ListApplicationVersions = (
        'KinesisAnalytics_20180523.ListApplicationVersions'
    )


class XAmzTarget22(Enum):
    KinesisAnalytics_20180523_ListApplications = (
        'KinesisAnalytics_20180523.ListApplications'
    )


class XAmzTarget23(Enum):
    KinesisAnalytics_20180523_ListTagsForResource = (
        'KinesisAnalytics_20180523.ListTagsForResource'
    )


class XAmzTarget24(Enum):
    KinesisAnalytics_20180523_RollbackApplication = (
        'KinesisAnalytics_20180523.RollbackApplication'
    )


class XAmzTarget25(Enum):
    KinesisAnalytics_20180523_StartApplication = (
        'KinesisAnalytics_20180523.StartApplication'
    )


class XAmzTarget26(Enum):
    KinesisAnalytics_20180523_StopApplication = (
        'KinesisAnalytics_20180523.StopApplication'
    )


class XAmzTarget27(Enum):
    KinesisAnalytics_20180523_TagResource = 'KinesisAnalytics_20180523.TagResource'


class XAmzTarget28(Enum):
    KinesisAnalytics_20180523_UntagResource = 'KinesisAnalytics_20180523.UntagResource'


class XAmzTarget29(Enum):
    KinesisAnalytics_20180523_UpdateApplication = (
        'KinesisAnalytics_20180523.UpdateApplication'
    )


class XAmzTarget30(Enum):
    KinesisAnalytics_20180523_UpdateApplicationMaintenanceConfiguration = (
        'KinesisAnalytics_20180523.UpdateApplicationMaintenanceConfiguration'
    )


class AddApplicationVpcConfigurationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    ConditionalToken_1: Optional[ConditionalToken] = Field(
        None, alias='ConditionalToken'
    )
    CurrentApplicationVersionId: Optional[ApplicationVersionId] = None
    VpcConfiguration_1: VpcConfiguration = Field(..., alias='VpcConfiguration')


class ApplicationMaintenanceConfigurationDescription(BaseModel):
    ApplicationMaintenanceWindowEndTime_1: ApplicationMaintenanceWindowEndTime = Field(
        ..., alias='ApplicationMaintenanceWindowEndTime'
    )
    ApplicationMaintenanceWindowStartTime_1: ApplicationMaintenanceWindowStartTime = (
        Field(..., alias='ApplicationMaintenanceWindowStartTime')
    )


class ApplicationMaintenanceConfigurationUpdate(BaseModel):
    ApplicationMaintenanceWindowStartTimeUpdate: ApplicationMaintenanceWindowStartTime


class ApplicationRestoreConfiguration(BaseModel):
    ApplicationRestoreType_1: ApplicationRestoreType = Field(
        ..., alias='ApplicationRestoreType'
    )
    SnapshotName_1: Optional[SnapshotName] = Field(None, alias='SnapshotName')


class ApplicationSnapshotConfiguration(BaseModel):
    SnapshotsEnabled: BooleanObject


class ApplicationSnapshotConfigurationDescription(BaseModel):
    SnapshotsEnabled: BooleanObject


class ApplicationSnapshotConfigurationUpdate(BaseModel):
    SnapshotsEnabledUpdate: BooleanObject


class ApplicationSummary(BaseModel):
    ApplicationARN: ResourceARN
    ApplicationMode_1: Optional[ApplicationMode] = Field(None, alias='ApplicationMode')
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    ApplicationStatus_1: ApplicationStatus = Field(..., alias='ApplicationStatus')
    ApplicationVersionId_1: ApplicationVersionId = Field(
        ..., alias='ApplicationVersionId'
    )
    RuntimeEnvironment_1: RuntimeEnvironment = Field(..., alias='RuntimeEnvironment')


class ApplicationVersionSummaries(RootModel[List[ApplicationVersionSummary]]):
    root: List[ApplicationVersionSummary]


class CSVMappingParameters(BaseModel):
    RecordColumnDelimiter_1: RecordColumnDelimiter = Field(
        ..., alias='RecordColumnDelimiter'
    )
    RecordRowDelimiter_1: RecordRowDelimiter = Field(..., alias='RecordRowDelimiter')


class CatalogConfiguration(BaseModel):
    GlueDataCatalogConfiguration_1: GlueDataCatalogConfiguration = Field(
        ..., alias='GlueDataCatalogConfiguration'
    )


class CatalogConfigurationDescription(BaseModel):
    GlueDataCatalogConfigurationDescription_1: (
        GlueDataCatalogConfigurationDescription
    ) = Field(..., alias='GlueDataCatalogConfigurationDescription')


class CatalogConfigurationUpdate(BaseModel):
    GlueDataCatalogConfigurationUpdate_1: GlueDataCatalogConfigurationUpdate = Field(
        ..., alias='GlueDataCatalogConfigurationUpdate'
    )


class CheckpointConfiguration(BaseModel):
    CheckpointInterval_1: Optional[CheckpointInterval] = Field(
        None, alias='CheckpointInterval'
    )
    CheckpointingEnabled: Optional[BooleanObject] = None
    ConfigurationType_1: ConfigurationType = Field(..., alias='ConfigurationType')
    MinPauseBetweenCheckpoints_1: Optional[MinPauseBetweenCheckpoints] = Field(
        None, alias='MinPauseBetweenCheckpoints'
    )


class CheckpointConfigurationDescription(BaseModel):
    CheckpointInterval_1: Optional[CheckpointInterval] = Field(
        None, alias='CheckpointInterval'
    )
    CheckpointingEnabled: Optional[BooleanObject] = None
    ConfigurationType_1: Optional[ConfigurationType] = Field(
        None, alias='ConfigurationType'
    )
    MinPauseBetweenCheckpoints_1: Optional[MinPauseBetweenCheckpoints] = Field(
        None, alias='MinPauseBetweenCheckpoints'
    )


class CheckpointConfigurationUpdate(BaseModel):
    CheckpointIntervalUpdate: Optional[CheckpointInterval] = None
    CheckpointingEnabledUpdate: Optional[BooleanObject] = None
    ConfigurationTypeUpdate: Optional[ConfigurationType] = None
    MinPauseBetweenCheckpointsUpdate: Optional[MinPauseBetweenCheckpoints] = None


class CloudWatchLoggingOption(BaseModel):
    LogStreamARN_1: LogStreamARN = Field(..., alias='LogStreamARN')


class CloudWatchLoggingOptionDescription(BaseModel):
    CloudWatchLoggingOptionId: Optional[Id] = None
    LogStreamARN_1: LogStreamARN = Field(..., alias='LogStreamARN')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class CloudWatchLoggingOptionDescriptions(
    RootModel[List[CloudWatchLoggingOptionDescription]]
):
    root: List[CloudWatchLoggingOptionDescription]


class CloudWatchLoggingOptionUpdate(BaseModel):
    CloudWatchLoggingOptionId: Id
    LogStreamARNUpdate: Optional[LogStreamARN] = None


class CloudWatchLoggingOptionUpdates(RootModel[List[CloudWatchLoggingOptionUpdate]]):
    root: List[CloudWatchLoggingOptionUpdate]


class CloudWatchLoggingOptions(RootModel[List[CloudWatchLoggingOption]]):
    root: List[CloudWatchLoggingOption]


class CodeContent(BaseModel):
    S3ContentLocation_1: Optional[S3ContentLocation] = Field(
        None, alias='S3ContentLocation'
    )
    TextContent_1: Optional[TextContent] = Field(None, alias='TextContent')
    ZipFileContent_1: Optional[ZipFileContent] = Field(None, alias='ZipFileContent')


class CodeContentDescription(BaseModel):
    CodeMD5_1: Optional[CodeMD5] = Field(None, alias='CodeMD5')
    CodeSize_1: Optional[CodeSize] = Field(None, alias='CodeSize')
    S3ApplicationCodeLocationDescription_1: Optional[
        S3ApplicationCodeLocationDescription
    ] = Field(None, alias='S3ApplicationCodeLocationDescription')
    TextContent_1: Optional[TextContent] = Field(None, alias='TextContent')


class CodeContentUpdate(BaseModel):
    S3ContentLocationUpdate_1: Optional[S3ContentLocationUpdate] = Field(
        None, alias='S3ContentLocationUpdate'
    )
    TextContentUpdate: Optional[TextContent] = None
    ZipFileContentUpdate: Optional[ZipFileContent] = None


class CreateApplicationPresignedUrlRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    SessionExpirationDurationInSeconds_1: Optional[
        SessionExpirationDurationInSeconds
    ] = Field(None, alias='SessionExpirationDurationInSeconds')
    UrlType_1: UrlType = Field(..., alias='UrlType')


class CreateApplicationSnapshotRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    SnapshotName_1: SnapshotName = Field(..., alias='SnapshotName')


class DeleteApplicationCloudWatchLoggingOptionRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CloudWatchLoggingOptionId: Id
    ConditionalToken_1: Optional[ConditionalToken] = Field(
        None, alias='ConditionalToken'
    )
    CurrentApplicationVersionId: Optional[ApplicationVersionId] = None


class DeleteApplicationCloudWatchLoggingOptionResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )
    CloudWatchLoggingOptionDescriptions_1: Optional[
        CloudWatchLoggingOptionDescriptions
    ] = Field(None, alias='CloudWatchLoggingOptionDescriptions')


class DeleteApplicationInputProcessingConfigurationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId
    InputId: Id


class DeleteApplicationInputProcessingConfigurationResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )


class DeleteApplicationOutputRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId
    OutputId: Id


class DeleteApplicationOutputResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )


class DeleteApplicationReferenceDataSourceRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId
    ReferenceId: Id


class DeleteApplicationReferenceDataSourceResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )


class DeleteApplicationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CreateTimestamp: Timestamp


class DeleteApplicationSnapshotRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    SnapshotCreationTimestamp: Timestamp
    SnapshotName_1: SnapshotName = Field(..., alias='SnapshotName')


class DeleteApplicationVpcConfigurationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    ConditionalToken_1: Optional[ConditionalToken] = Field(
        None, alias='ConditionalToken'
    )
    CurrentApplicationVersionId: Optional[ApplicationVersionId] = None
    VpcConfigurationId: Id


class DeleteApplicationVpcConfigurationResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )


class DeployAsApplicationConfiguration(BaseModel):
    S3ContentLocation: S3ContentBaseLocation


class DeployAsApplicationConfigurationDescription(BaseModel):
    S3ContentLocationDescription: S3ContentBaseLocationDescription


class DeployAsApplicationConfigurationUpdate(BaseModel):
    S3ContentLocationUpdate: Optional[S3ContentBaseLocationUpdate] = None


class DescribeApplicationSnapshotRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    SnapshotName_1: SnapshotName = Field(..., alias='SnapshotName')


class DestinationSchema(BaseModel):
    RecordFormatType_1: RecordFormatType = Field(..., alias='RecordFormatType')


class InputLambdaProcessor(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class InputLambdaProcessorDescription(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class InputLambdaProcessorUpdate(BaseModel):
    ResourceARNUpdate: ResourceARN


class InputParallelism(BaseModel):
    Count: Optional[InputParallelismCount] = None


class InputProcessingConfiguration(BaseModel):
    InputLambdaProcessor_1: InputLambdaProcessor = Field(
        ..., alias='InputLambdaProcessor'
    )


class InputProcessingConfigurationDescription(BaseModel):
    InputLambdaProcessorDescription_1: Optional[InputLambdaProcessorDescription] = (
        Field(None, alias='InputLambdaProcessorDescription')
    )


class InputProcessingConfigurationUpdate(BaseModel):
    InputLambdaProcessorUpdate_1: InputLambdaProcessorUpdate = Field(
        ..., alias='InputLambdaProcessorUpdate'
    )


class JSONMappingParameters(BaseModel):
    RecordRowPath_1: RecordRowPath = Field(..., alias='RecordRowPath')


class KinesisFirehoseInput(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class KinesisFirehoseInputDescription(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class KinesisFirehoseInputUpdate(BaseModel):
    ResourceARNUpdate: ResourceARN


class KinesisFirehoseOutput(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class KinesisFirehoseOutputDescription(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class KinesisFirehoseOutputUpdate(BaseModel):
    ResourceARNUpdate: ResourceARN


class KinesisStreamsInput(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class KinesisStreamsInputDescription(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class KinesisStreamsInputUpdate(BaseModel):
    ResourceARNUpdate: ResourceARN


class KinesisStreamsOutput(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class KinesisStreamsOutputDescription(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class KinesisStreamsOutputUpdate(BaseModel):
    ResourceARNUpdate: ResourceARN


class LambdaOutput(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class LambdaOutputDescription(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    RoleARN_1: Optional[RoleARN] = Field(None, alias='RoleARN')


class LambdaOutputUpdate(BaseModel):
    ResourceARNUpdate: ResourceARN


class ListApplicationSnapshotsRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Limit: Optional[ListSnapshotsInputLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListApplicationVersionsRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Limit: Optional[ListApplicationVersionsInputLimit] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListApplicationVersionsResponse(BaseModel):
    ApplicationVersionSummaries_1: Optional[ApplicationVersionSummaries] = Field(
        None, alias='ApplicationVersionSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class MappingParameters(BaseModel):
    CSVMappingParameters_1: Optional[CSVMappingParameters] = Field(
        None, alias='CSVMappingParameters'
    )
    JSONMappingParameters_1: Optional[JSONMappingParameters] = Field(
        None, alias='JSONMappingParameters'
    )


class MavenReference(BaseModel):
    ArtifactId: MavenArtifactId
    GroupId: MavenGroupId
    Version: MavenVersion


class Output(BaseModel):
    DestinationSchema_1: DestinationSchema = Field(..., alias='DestinationSchema')
    KinesisFirehoseOutput_1: Optional[KinesisFirehoseOutput] = Field(
        None, alias='KinesisFirehoseOutput'
    )
    KinesisStreamsOutput_1: Optional[KinesisStreamsOutput] = Field(
        None, alias='KinesisStreamsOutput'
    )
    LambdaOutput_1: Optional[LambdaOutput] = Field(None, alias='LambdaOutput')
    Name: InAppStreamName


class OutputDescription(BaseModel):
    DestinationSchema_1: Optional[DestinationSchema] = Field(
        None, alias='DestinationSchema'
    )
    KinesisFirehoseOutputDescription_1: Optional[KinesisFirehoseOutputDescription] = (
        Field(None, alias='KinesisFirehoseOutputDescription')
    )
    KinesisStreamsOutputDescription_1: Optional[KinesisStreamsOutputDescription] = (
        Field(None, alias='KinesisStreamsOutputDescription')
    )
    LambdaOutputDescription_1: Optional[LambdaOutputDescription] = Field(
        None, alias='LambdaOutputDescription'
    )
    Name: Optional[InAppStreamName] = None
    OutputId: Optional[Id] = None


class OutputDescriptions(RootModel[List[OutputDescription]]):
    root: List[OutputDescription]


class OutputUpdate(BaseModel):
    DestinationSchemaUpdate: Optional[DestinationSchema] = None
    KinesisFirehoseOutputUpdate_1: Optional[KinesisFirehoseOutputUpdate] = Field(
        None, alias='KinesisFirehoseOutputUpdate'
    )
    KinesisStreamsOutputUpdate_1: Optional[KinesisStreamsOutputUpdate] = Field(
        None, alias='KinesisStreamsOutputUpdate'
    )
    LambdaOutputUpdate_1: Optional[LambdaOutputUpdate] = Field(
        None, alias='LambdaOutputUpdate'
    )
    NameUpdate: Optional[InAppStreamName] = None
    OutputId: Id


class OutputUpdates(RootModel[List[OutputUpdate]]):
    root: List[OutputUpdate]


class Outputs(RootModel[List[Output]]):
    root: List[Output]


class ParallelismConfiguration(BaseModel):
    AutoScalingEnabled: Optional[BooleanObject] = None
    ConfigurationType_1: ConfigurationType = Field(..., alias='ConfigurationType')
    Parallelism_1: Optional[Parallelism] = Field(None, alias='Parallelism')
    ParallelismPerKPU_1: Optional[ParallelismPerKPU] = Field(
        None, alias='ParallelismPerKPU'
    )


class ParallelismConfigurationDescription(BaseModel):
    AutoScalingEnabled: Optional[BooleanObject] = None
    ConfigurationType_1: Optional[ConfigurationType] = Field(
        None, alias='ConfigurationType'
    )
    CurrentParallelism: Optional[Parallelism] = None
    Parallelism_1: Optional[Parallelism] = Field(None, alias='Parallelism')
    ParallelismPerKPU_1: Optional[ParallelismPerKPU] = Field(
        None, alias='ParallelismPerKPU'
    )


class ParallelismConfigurationUpdate(BaseModel):
    AutoScalingEnabledUpdate: Optional[BooleanObject] = None
    ConfigurationTypeUpdate: Optional[ConfigurationType] = None
    ParallelismPerKPUUpdate: Optional[ParallelismPerKPU] = None
    ParallelismUpdate: Optional[Parallelism] = None


class ParsedInputRecord(RootModel[List[ParsedInputRecordField]]):
    root: List[ParsedInputRecordField]


class ParsedInputRecords(RootModel[List[ParsedInputRecord]]):
    root: List[ParsedInputRecord]


class PropertyMap(RootModel[Optional[Dict[str, PropertyValue]]]):
    root: Optional[Dict[str, PropertyValue]] = None


class RecordColumn(BaseModel):
    Mapping: Optional[RecordColumnMapping] = None
    Name: RecordColumnName
    SqlType: RecordColumnSqlType


class RecordColumns(RootModel[List[RecordColumn]]):
    root: List[RecordColumn] = Field(..., max_length=1000, min_length=1)


class RecordFormat(BaseModel):
    MappingParameters_1: Optional[MappingParameters] = Field(
        None, alias='MappingParameters'
    )
    RecordFormatType_1: RecordFormatType = Field(..., alias='RecordFormatType')


class RunConfiguration(BaseModel):
    ApplicationRestoreConfiguration_1: Optional[ApplicationRestoreConfiguration] = (
        Field(None, alias='ApplicationRestoreConfiguration')
    )
    FlinkRunConfiguration_1: Optional[FlinkRunConfiguration] = Field(
        None, alias='FlinkRunConfiguration'
    )
    SqlRunConfigurations_1: Optional[SqlRunConfigurations] = Field(
        None, alias='SqlRunConfigurations'
    )


class RunConfigurationDescription(BaseModel):
    ApplicationRestoreConfigurationDescription: Optional[
        ApplicationRestoreConfiguration
    ] = None
    FlinkRunConfigurationDescription: Optional[FlinkRunConfiguration] = None


class RunConfigurationUpdate(BaseModel):
    ApplicationRestoreConfiguration_1: Optional[ApplicationRestoreConfiguration] = (
        Field(None, alias='ApplicationRestoreConfiguration')
    )
    FlinkRunConfiguration_1: Optional[FlinkRunConfiguration] = Field(
        None, alias='FlinkRunConfiguration'
    )


class SnapshotDetails(BaseModel):
    ApplicationVersionId_1: ApplicationVersionId = Field(
        ..., alias='ApplicationVersionId'
    )
    SnapshotCreationTimestamp: Optional[Timestamp] = None
    SnapshotName_1: SnapshotName = Field(..., alias='SnapshotName')
    SnapshotStatus_1: SnapshotStatus = Field(..., alias='SnapshotStatus')


class SnapshotSummaries(RootModel[List[SnapshotDetails]]):
    root: List[SnapshotDetails]


class SourceSchema(BaseModel):
    RecordColumns_1: RecordColumns = Field(..., alias='RecordColumns')
    RecordEncoding_1: Optional[RecordEncoding] = Field(None, alias='RecordEncoding')
    RecordFormat_1: RecordFormat = Field(..., alias='RecordFormat')


class StartApplicationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    RunConfiguration_1: Optional[RunConfiguration] = Field(
        None, alias='RunConfiguration'
    )


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=1)


class UpdateApplicationMaintenanceConfigurationRequest(BaseModel):
    ApplicationMaintenanceConfigurationUpdate_1: (
        ApplicationMaintenanceConfigurationUpdate
    ) = Field(..., alias='ApplicationMaintenanceConfigurationUpdate')
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')


class UpdateApplicationMaintenanceConfigurationResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationMaintenanceConfigurationDescription_1: Optional[
        ApplicationMaintenanceConfigurationDescription
    ] = Field(None, alias='ApplicationMaintenanceConfigurationDescription')


class VpcConfigurationDescription(BaseModel):
    SecurityGroupIds_1: SecurityGroupIds = Field(..., alias='SecurityGroupIds')
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    VpcConfigurationId: Id
    VpcId_1: VpcId = Field(..., alias='VpcId')


class VpcConfigurationDescriptions(RootModel[List[VpcConfigurationDescription]]):
    root: List[VpcConfigurationDescription]


class AddApplicationCloudWatchLoggingOptionRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CloudWatchLoggingOption_1: CloudWatchLoggingOption = Field(
        ..., alias='CloudWatchLoggingOption'
    )
    ConditionalToken_1: Optional[ConditionalToken] = Field(
        None, alias='ConditionalToken'
    )
    CurrentApplicationVersionId: Optional[ApplicationVersionId] = None


class AddApplicationCloudWatchLoggingOptionResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )
    CloudWatchLoggingOptionDescriptions_1: Optional[
        CloudWatchLoggingOptionDescriptions
    ] = Field(None, alias='CloudWatchLoggingOptionDescriptions')


class AddApplicationInputProcessingConfigurationRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId
    InputId: Id
    InputProcessingConfiguration_1: InputProcessingConfiguration = Field(
        ..., alias='InputProcessingConfiguration'
    )


class AddApplicationInputProcessingConfigurationResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )
    InputId: Optional[Id] = None
    InputProcessingConfigurationDescription_1: Optional[
        InputProcessingConfigurationDescription
    ] = Field(None, alias='InputProcessingConfigurationDescription')


class AddApplicationOutputRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId
    Output_1: Output = Field(..., alias='Output')


class AddApplicationOutputResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )
    OutputDescriptions_1: Optional[OutputDescriptions] = Field(
        None, alias='OutputDescriptions'
    )


class AddApplicationVpcConfigurationResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )
    VpcConfigurationDescription_1: Optional[VpcConfigurationDescription] = Field(
        None, alias='VpcConfigurationDescription'
    )


class ApplicationCodeConfiguration(BaseModel):
    CodeContent_1: Optional[CodeContent] = Field(None, alias='CodeContent')
    CodeContentType_1: CodeContentType = Field(..., alias='CodeContentType')


class ApplicationCodeConfigurationDescription(BaseModel):
    CodeContentDescription_1: Optional[CodeContentDescription] = Field(
        None, alias='CodeContentDescription'
    )
    CodeContentType_1: CodeContentType = Field(..., alias='CodeContentType')


class ApplicationCodeConfigurationUpdate(BaseModel):
    CodeContentTypeUpdate: Optional[CodeContentType] = None
    CodeContentUpdate_1: Optional[CodeContentUpdate] = Field(
        None, alias='CodeContentUpdate'
    )


class ApplicationSummaries(RootModel[List[ApplicationSummary]]):
    root: List[ApplicationSummary]


class CustomArtifactConfiguration(BaseModel):
    ArtifactType_1: ArtifactType = Field(..., alias='ArtifactType')
    MavenReference_1: Optional[MavenReference] = Field(None, alias='MavenReference')
    S3ContentLocation_1: Optional[S3ContentLocation] = Field(
        None, alias='S3ContentLocation'
    )


class CustomArtifactConfigurationDescription(BaseModel):
    ArtifactType_1: Optional[ArtifactType] = Field(None, alias='ArtifactType')
    MavenReferenceDescription: Optional[MavenReference] = None
    S3ContentLocationDescription: Optional[S3ContentLocation] = None


class CustomArtifactsConfigurationDescriptionList(
    RootModel[List[CustomArtifactConfigurationDescription]]
):
    root: List[CustomArtifactConfigurationDescription] = Field(..., max_length=50)


class CustomArtifactsConfigurationList(RootModel[List[CustomArtifactConfiguration]]):
    root: List[CustomArtifactConfiguration] = Field(..., max_length=50)


class DescribeApplicationSnapshotResponse(BaseModel):
    SnapshotDetails_1: SnapshotDetails = Field(..., alias='SnapshotDetails')


class DiscoverInputSchemaRequest(BaseModel):
    InputProcessingConfiguration_1: Optional[InputProcessingConfiguration] = Field(
        None, alias='InputProcessingConfiguration'
    )
    InputStartingPositionConfiguration_1: Optional[
        InputStartingPositionConfiguration
    ] = Field(None, alias='InputStartingPositionConfiguration')
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    S3Configuration_1: Optional[S3Configuration] = Field(None, alias='S3Configuration')
    ServiceExecutionRole: RoleARN


class DiscoverInputSchemaResponse(BaseModel):
    InputSchema: Optional[SourceSchema] = None
    ParsedInputRecords_1: Optional[ParsedInputRecords] = Field(
        None, alias='ParsedInputRecords'
    )
    ProcessedInputRecords_1: Optional[ProcessedInputRecords] = Field(
        None, alias='ProcessedInputRecords'
    )
    RawInputRecords_1: Optional[RawInputRecords] = Field(None, alias='RawInputRecords')


class FlinkApplicationConfiguration(BaseModel):
    CheckpointConfiguration_1: Optional[CheckpointConfiguration] = Field(
        None, alias='CheckpointConfiguration'
    )
    MonitoringConfiguration_1: Optional[MonitoringConfiguration] = Field(
        None, alias='MonitoringConfiguration'
    )
    ParallelismConfiguration_1: Optional[ParallelismConfiguration] = Field(
        None, alias='ParallelismConfiguration'
    )


class FlinkApplicationConfigurationDescription(BaseModel):
    CheckpointConfigurationDescription_1: Optional[
        CheckpointConfigurationDescription
    ] = Field(None, alias='CheckpointConfigurationDescription')
    JobPlanDescription_1: Optional[JobPlanDescription] = Field(
        None, alias='JobPlanDescription'
    )
    MonitoringConfigurationDescription_1: Optional[
        MonitoringConfigurationDescription
    ] = Field(None, alias='MonitoringConfigurationDescription')
    ParallelismConfigurationDescription_1: Optional[
        ParallelismConfigurationDescription
    ] = Field(None, alias='ParallelismConfigurationDescription')


class FlinkApplicationConfigurationUpdate(BaseModel):
    CheckpointConfigurationUpdate_1: Optional[CheckpointConfigurationUpdate] = Field(
        None, alias='CheckpointConfigurationUpdate'
    )
    MonitoringConfigurationUpdate_1: Optional[MonitoringConfigurationUpdate] = Field(
        None, alias='MonitoringConfigurationUpdate'
    )
    ParallelismConfigurationUpdate_1: Optional[ParallelismConfigurationUpdate] = Field(
        None, alias='ParallelismConfigurationUpdate'
    )


class Input(BaseModel):
    InputParallelism_1: Optional[InputParallelism] = Field(
        None, alias='InputParallelism'
    )
    InputProcessingConfiguration_1: Optional[InputProcessingConfiguration] = Field(
        None, alias='InputProcessingConfiguration'
    )
    InputSchema: SourceSchema
    KinesisFirehoseInput_1: Optional[KinesisFirehoseInput] = Field(
        None, alias='KinesisFirehoseInput'
    )
    KinesisStreamsInput_1: Optional[KinesisStreamsInput] = Field(
        None, alias='KinesisStreamsInput'
    )
    NamePrefix: InAppStreamName


class InputDescription(BaseModel):
    InAppStreamNames_1: Optional[InAppStreamNames] = Field(
        None, alias='InAppStreamNames'
    )
    InputId: Optional[Id] = None
    InputParallelism_1: Optional[InputParallelism] = Field(
        None, alias='InputParallelism'
    )
    InputProcessingConfigurationDescription_1: Optional[
        InputProcessingConfigurationDescription
    ] = Field(None, alias='InputProcessingConfigurationDescription')
    InputSchema: Optional[SourceSchema] = None
    InputStartingPositionConfiguration_1: Optional[
        InputStartingPositionConfiguration
    ] = Field(None, alias='InputStartingPositionConfiguration')
    KinesisFirehoseInputDescription_1: Optional[KinesisFirehoseInputDescription] = (
        Field(None, alias='KinesisFirehoseInputDescription')
    )
    KinesisStreamsInputDescription_1: Optional[KinesisStreamsInputDescription] = Field(
        None, alias='KinesisStreamsInputDescription'
    )
    NamePrefix: Optional[InAppStreamName] = None


class InputDescriptions(RootModel[List[InputDescription]]):
    root: List[InputDescription]


class InputSchemaUpdate(BaseModel):
    RecordColumnUpdates: Optional[RecordColumns] = None
    RecordEncodingUpdate: Optional[RecordEncoding] = None
    RecordFormatUpdate: Optional[RecordFormat] = None


class InputUpdate(BaseModel):
    InputId: Id
    InputParallelismUpdate_1: Optional[InputParallelismUpdate] = Field(
        None, alias='InputParallelismUpdate'
    )
    InputProcessingConfigurationUpdate_1: Optional[
        InputProcessingConfigurationUpdate
    ] = Field(None, alias='InputProcessingConfigurationUpdate')
    InputSchemaUpdate_1: Optional[InputSchemaUpdate] = Field(
        None, alias='InputSchemaUpdate'
    )
    KinesisFirehoseInputUpdate_1: Optional[KinesisFirehoseInputUpdate] = Field(
        None, alias='KinesisFirehoseInputUpdate'
    )
    KinesisStreamsInputUpdate_1: Optional[KinesisStreamsInputUpdate] = Field(
        None, alias='KinesisStreamsInputUpdate'
    )
    NamePrefixUpdate: Optional[InAppStreamName] = None


class InputUpdates(RootModel[List[InputUpdate]]):
    root: List[InputUpdate]


class Inputs(RootModel[List[Input]]):
    root: List[Input]


class ListApplicationSnapshotsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SnapshotSummaries_1: Optional[SnapshotSummaries] = Field(
        None, alias='SnapshotSummaries'
    )


class ListApplicationsResponse(BaseModel):
    ApplicationSummaries_1: ApplicationSummaries = Field(
        ..., alias='ApplicationSummaries'
    )
    NextToken: Optional[ApplicationName] = None


class ListTagsForResourceResponse(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class PropertyGroup(BaseModel):
    PropertyGroupId: Id
    PropertyMap_1: PropertyMap = Field(..., alias='PropertyMap')


class PropertyGroups(RootModel[List[PropertyGroup]]):
    root: List[PropertyGroup] = Field(..., max_length=50)


class ReferenceDataSource(BaseModel):
    ReferenceSchema: SourceSchema
    S3ReferenceDataSource_1: Optional[S3ReferenceDataSource] = Field(
        None, alias='S3ReferenceDataSource'
    )
    TableName: InAppTableName


class ReferenceDataSourceDescription(BaseModel):
    ReferenceId: Id
    ReferenceSchema: Optional[SourceSchema] = None
    S3ReferenceDataSourceDescription_1: S3ReferenceDataSourceDescription = Field(
        ..., alias='S3ReferenceDataSourceDescription'
    )
    TableName: InAppTableName


class ReferenceDataSourceDescriptions(RootModel[List[ReferenceDataSourceDescription]]):
    root: List[ReferenceDataSourceDescription]


class ReferenceDataSourceUpdate(BaseModel):
    ReferenceId: Id
    ReferenceSchemaUpdate: Optional[SourceSchema] = None
    S3ReferenceDataSourceUpdate_1: Optional[S3ReferenceDataSourceUpdate] = Field(
        None, alias='S3ReferenceDataSourceUpdate'
    )
    TableNameUpdate: Optional[InAppTableName] = None


class ReferenceDataSourceUpdates(RootModel[List[ReferenceDataSourceUpdate]]):
    root: List[ReferenceDataSourceUpdate]


class ReferenceDataSources(RootModel[List[ReferenceDataSource]]):
    root: List[ReferenceDataSource]


class SqlApplicationConfiguration(BaseModel):
    Inputs_1: Optional[Inputs] = Field(None, alias='Inputs')
    Outputs_1: Optional[Outputs] = Field(None, alias='Outputs')
    ReferenceDataSources_1: Optional[ReferenceDataSources] = Field(
        None, alias='ReferenceDataSources'
    )


class SqlApplicationConfigurationDescription(BaseModel):
    InputDescriptions_1: Optional[InputDescriptions] = Field(
        None, alias='InputDescriptions'
    )
    OutputDescriptions_1: Optional[OutputDescriptions] = Field(
        None, alias='OutputDescriptions'
    )
    ReferenceDataSourceDescriptions_1: Optional[ReferenceDataSourceDescriptions] = (
        Field(None, alias='ReferenceDataSourceDescriptions')
    )


class SqlApplicationConfigurationUpdate(BaseModel):
    InputUpdates_1: Optional[InputUpdates] = Field(None, alias='InputUpdates')
    OutputUpdates_1: Optional[OutputUpdates] = Field(None, alias='OutputUpdates')
    ReferenceDataSourceUpdates_1: Optional[ReferenceDataSourceUpdates] = Field(
        None, alias='ReferenceDataSourceUpdates'
    )


class TagResourceRequest(BaseModel):
    ResourceARN: KinesisAnalyticsARN
    Tags_1: Tags = Field(..., alias='Tags')


class ZeppelinApplicationConfiguration(BaseModel):
    CatalogConfiguration_1: Optional[CatalogConfiguration] = Field(
        None, alias='CatalogConfiguration'
    )
    CustomArtifactsConfiguration: Optional[CustomArtifactsConfigurationList] = None
    DeployAsApplicationConfiguration_1: Optional[DeployAsApplicationConfiguration] = (
        Field(None, alias='DeployAsApplicationConfiguration')
    )
    MonitoringConfiguration: Optional[ZeppelinMonitoringConfiguration] = None


class ZeppelinApplicationConfigurationDescription(BaseModel):
    CatalogConfigurationDescription_1: Optional[CatalogConfigurationDescription] = (
        Field(None, alias='CatalogConfigurationDescription')
    )
    CustomArtifactsConfigurationDescription: Optional[
        CustomArtifactsConfigurationDescriptionList
    ] = None
    DeployAsApplicationConfigurationDescription_1: Optional[
        DeployAsApplicationConfigurationDescription
    ] = Field(None, alias='DeployAsApplicationConfigurationDescription')
    MonitoringConfigurationDescription: ZeppelinMonitoringConfigurationDescription


class ZeppelinApplicationConfigurationUpdate(BaseModel):
    CatalogConfigurationUpdate_1: Optional[CatalogConfigurationUpdate] = Field(
        None, alias='CatalogConfigurationUpdate'
    )
    CustomArtifactsConfigurationUpdate: Optional[CustomArtifactsConfigurationList] = (
        None
    )
    DeployAsApplicationConfigurationUpdate_1: Optional[
        DeployAsApplicationConfigurationUpdate
    ] = Field(None, alias='DeployAsApplicationConfigurationUpdate')
    MonitoringConfigurationUpdate: Optional[ZeppelinMonitoringConfigurationUpdate] = (
        None
    )


class AddApplicationInputRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId
    Input_1: Input = Field(..., alias='Input')


class AddApplicationInputResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )
    InputDescriptions_1: Optional[InputDescriptions] = Field(
        None, alias='InputDescriptions'
    )


class AddApplicationReferenceDataSourceRequest(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CurrentApplicationVersionId: ApplicationVersionId
    ReferenceDataSource_1: ReferenceDataSource = Field(..., alias='ReferenceDataSource')


class AddApplicationReferenceDataSourceResponse(BaseModel):
    ApplicationARN: Optional[ResourceARN] = None
    ApplicationVersionId_1: Optional[ApplicationVersionId] = Field(
        None, alias='ApplicationVersionId'
    )
    ReferenceDataSourceDescriptions_1: Optional[ReferenceDataSourceDescriptions] = (
        Field(None, alias='ReferenceDataSourceDescriptions')
    )


class EnvironmentProperties(BaseModel):
    PropertyGroups_1: PropertyGroups = Field(..., alias='PropertyGroups')


class EnvironmentPropertyDescriptions(BaseModel):
    PropertyGroupDescriptions: Optional[PropertyGroups] = None


class EnvironmentPropertyUpdates(BaseModel):
    PropertyGroups_1: PropertyGroups = Field(..., alias='PropertyGroups')


class ApplicationConfiguration(BaseModel):
    ApplicationCodeConfiguration_1: Optional[ApplicationCodeConfiguration] = Field(
        None, alias='ApplicationCodeConfiguration'
    )
    ApplicationSnapshotConfiguration_1: Optional[ApplicationSnapshotConfiguration] = (
        Field(None, alias='ApplicationSnapshotConfiguration')
    )
    EnvironmentProperties_1: Optional[EnvironmentProperties] = Field(
        None, alias='EnvironmentProperties'
    )
    FlinkApplicationConfiguration_1: Optional[FlinkApplicationConfiguration] = Field(
        None, alias='FlinkApplicationConfiguration'
    )
    SqlApplicationConfiguration_1: Optional[SqlApplicationConfiguration] = Field(
        None, alias='SqlApplicationConfiguration'
    )
    VpcConfigurations_1: Optional[VpcConfigurations] = Field(
        None, alias='VpcConfigurations'
    )
    ZeppelinApplicationConfiguration_1: Optional[ZeppelinApplicationConfiguration] = (
        Field(None, alias='ZeppelinApplicationConfiguration')
    )


class ApplicationConfigurationDescription(BaseModel):
    ApplicationCodeConfigurationDescription_1: Optional[
        ApplicationCodeConfigurationDescription
    ] = Field(None, alias='ApplicationCodeConfigurationDescription')
    ApplicationSnapshotConfigurationDescription_1: Optional[
        ApplicationSnapshotConfigurationDescription
    ] = Field(None, alias='ApplicationSnapshotConfigurationDescription')
    EnvironmentPropertyDescriptions_1: Optional[EnvironmentPropertyDescriptions] = (
        Field(None, alias='EnvironmentPropertyDescriptions')
    )
    FlinkApplicationConfigurationDescription_1: Optional[
        FlinkApplicationConfigurationDescription
    ] = Field(None, alias='FlinkApplicationConfigurationDescription')
    RunConfigurationDescription_1: Optional[RunConfigurationDescription] = Field(
        None, alias='RunConfigurationDescription'
    )
    SqlApplicationConfigurationDescription_1: Optional[
        SqlApplicationConfigurationDescription
    ] = Field(None, alias='SqlApplicationConfigurationDescription')
    VpcConfigurationDescriptions_1: Optional[VpcConfigurationDescriptions] = Field(
        None, alias='VpcConfigurationDescriptions'
    )
    ZeppelinApplicationConfigurationDescription_1: Optional[
        ZeppelinApplicationConfigurationDescription
    ] = Field(None, alias='ZeppelinApplicationConfigurationDescription')


class ApplicationConfigurationUpdate(BaseModel):
    ApplicationCodeConfigurationUpdate_1: Optional[
        ApplicationCodeConfigurationUpdate
    ] = Field(None, alias='ApplicationCodeConfigurationUpdate')
    ApplicationSnapshotConfigurationUpdate_1: Optional[
        ApplicationSnapshotConfigurationUpdate
    ] = Field(None, alias='ApplicationSnapshotConfigurationUpdate')
    EnvironmentPropertyUpdates_1: Optional[EnvironmentPropertyUpdates] = Field(
        None, alias='EnvironmentPropertyUpdates'
    )
    FlinkApplicationConfigurationUpdate_1: Optional[
        FlinkApplicationConfigurationUpdate
    ] = Field(None, alias='FlinkApplicationConfigurationUpdate')
    SqlApplicationConfigurationUpdate_1: Optional[SqlApplicationConfigurationUpdate] = (
        Field(None, alias='SqlApplicationConfigurationUpdate')
    )
    VpcConfigurationUpdates_1: Optional[VpcConfigurationUpdates] = Field(
        None, alias='VpcConfigurationUpdates'
    )
    ZeppelinApplicationConfigurationUpdate_1: Optional[
        ZeppelinApplicationConfigurationUpdate
    ] = Field(None, alias='ZeppelinApplicationConfigurationUpdate')


class ApplicationDetail(BaseModel):
    ApplicationARN: ResourceARN
    ApplicationConfigurationDescription_1: Optional[
        ApplicationConfigurationDescription
    ] = Field(None, alias='ApplicationConfigurationDescription')
    ApplicationDescription_1: Optional[ApplicationDescription] = Field(
        None, alias='ApplicationDescription'
    )
    ApplicationMaintenanceConfigurationDescription_1: Optional[
        ApplicationMaintenanceConfigurationDescription
    ] = Field(None, alias='ApplicationMaintenanceConfigurationDescription')
    ApplicationMode_1: Optional[ApplicationMode] = Field(None, alias='ApplicationMode')
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    ApplicationStatus_1: ApplicationStatus = Field(..., alias='ApplicationStatus')
    ApplicationVersionId_1: ApplicationVersionId = Field(
        ..., alias='ApplicationVersionId'
    )
    ApplicationVersionRolledBackFrom: Optional[ApplicationVersionId] = None
    ApplicationVersionRolledBackTo: Optional[ApplicationVersionId] = None
    ApplicationVersionUpdatedFrom: Optional[ApplicationVersionId] = None
    CloudWatchLoggingOptionDescriptions_1: Optional[
        CloudWatchLoggingOptionDescriptions
    ] = Field(None, alias='CloudWatchLoggingOptionDescriptions')
    ConditionalToken_1: Optional[ConditionalToken] = Field(
        None, alias='ConditionalToken'
    )
    CreateTimestamp: Optional[Timestamp] = None
    LastUpdateTimestamp: Optional[Timestamp] = None
    RuntimeEnvironment_1: RuntimeEnvironment = Field(..., alias='RuntimeEnvironment')
    ServiceExecutionRole: Optional[RoleARN] = None


class CreateApplicationRequest(BaseModel):
    ApplicationConfiguration_1: Optional[ApplicationConfiguration] = Field(
        None, alias='ApplicationConfiguration'
    )
    ApplicationDescription_1: Optional[ApplicationDescription] = Field(
        None, alias='ApplicationDescription'
    )
    ApplicationMode_1: Optional[ApplicationMode] = Field(None, alias='ApplicationMode')
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CloudWatchLoggingOptions_1: Optional[CloudWatchLoggingOptions] = Field(
        None, alias='CloudWatchLoggingOptions'
    )
    RuntimeEnvironment_1: RuntimeEnvironment = Field(..., alias='RuntimeEnvironment')
    ServiceExecutionRole: RoleARN
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateApplicationResponse(BaseModel):
    ApplicationDetail_1: ApplicationDetail = Field(..., alias='ApplicationDetail')


class DescribeApplicationResponse(BaseModel):
    ApplicationDetail_1: ApplicationDetail = Field(..., alias='ApplicationDetail')


class DescribeApplicationVersionResponse(BaseModel):
    ApplicationVersionDetail: Optional[ApplicationDetail] = None


class RollbackApplicationResponse(BaseModel):
    ApplicationDetail_1: ApplicationDetail = Field(..., alias='ApplicationDetail')


class UpdateApplicationRequest(BaseModel):
    ApplicationConfigurationUpdate_1: Optional[ApplicationConfigurationUpdate] = Field(
        None, alias='ApplicationConfigurationUpdate'
    )
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CloudWatchLoggingOptionUpdates_1: Optional[CloudWatchLoggingOptionUpdates] = Field(
        None, alias='CloudWatchLoggingOptionUpdates'
    )
    ConditionalToken_1: Optional[ConditionalToken] = Field(
        None, alias='ConditionalToken'
    )
    CurrentApplicationVersionId: Optional[ApplicationVersionId] = None
    RunConfigurationUpdate_1: Optional[RunConfigurationUpdate] = Field(
        None, alias='RunConfigurationUpdate'
    )
    ServiceExecutionRoleUpdate: Optional[RoleARN] = None


class UpdateApplicationResponse(BaseModel):
    ApplicationDetail_1: ApplicationDetail = Field(..., alias='ApplicationDetail')
